// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
    .toISOString()
    .split("T")[0];
});

var encoding = "utf8";

var pendingTodosFile = "todo.txt";

var completedTodosFile = "done.txt";

var help_string = "Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics";

function isEmpty(x) {
  return x.length === 0;
}

function convertToInt(x) {
  return Belt_Array.map(x, Belt_Int.fromString);
}

function readFile(file) {
  if (!Fs.existsSync(file)) {
    return [];
  }
  var text = Fs.readFileSync(file, {
          encoding: encoding,
          flag: "r"
        }).trim();
  if (text.length !== 0) {
    return text.split(Os.EOL);
  } else {
    return [];
  }
}

function delTodo(number) {
  var todos = readFile(pendingTodosFile);
  if (number < 1 || number > todos.length) {
    console.log("Error: todo #" + String(number) + " does not exist. Nothing deleted.");
  } else {
    todos.splice(number - 1 | 0, 1);
    console.log("Deleted todo #" + String(number));
    Fs.writeFileSync(pendingTodosFile, todos.join("\n"), {
          encoding: encoding,
          flag: "w"
        });
  }
  
}

function markTodo(number) {
  var todos = readFile(pendingTodosFile);
  if (number < 1 || number > todos.length) {
    console.log("Error: todo #" + String(number) + " does not exist.");
    return ;
  }
  var completedTodo = todos.splice(number - 1 | 0, 1);
  Fs.writeFileSync(pendingTodosFile, todos.join("\n"), {
        encoding: encoding,
        flag: "w"
      });
  Fs.appendFileSync(completedTodosFile, Caml_array.get(completedTodo, 0) + Os.EOL, {
        encoding: encoding,
        flag: "a"
      });
  console.log("Marked todo #" + String(number) + " as done.");
  
}

function cmdHelp(param) {
  console.log(help_string);
  
}

function cmdLs(param) {
  var todos = readFile(pendingTodosFile);
  if (todos.length === 0) {
    console.log("There are no pending todos!");
  } else {
    console.log(Belt_Array.reduceWithIndex(todos, "", (function (acc, x, i) {
                return "\n[" + String(i + 1 | 0) + "] " + x + acc;
              })));
  }
  
}

function cmdAddTodo(text) {
  if (text.length === 0) {
    console.log("Error: Missing todo string. Nothing added!");
    return ;
  } else {
    return Belt_Array.forEach(text, (function (x) {
                  Fs.appendFileSync(pendingTodosFile, x + Os.EOL, {
                        encoding: encoding,
                        flag: "a"
                      });
                  console.log("Added todo: \"" + x + "\"");
                  
                }));
  }
}

function cmdDelTodo(numbers) {
  if (numbers.length === 0) {
    console.log("Error: Missing NUMBER for deleting todo.");
    return ;
  } else {
    return Belt_Array.forEach(numbers, (function (num) {
                  if (num !== undefined) {
                    return delTodo(num);
                  } else {
                    console.log("Error");
                    return ;
                  }
                }));
  }
}

function cmdMarkDone(numbers) {
  if (numbers.length === 0) {
    console.log("Error: Missing NUMBER for marking todo as done.");
    return ;
  } else {
    return Belt_Array.forEach(numbers, (function (num) {
                  if (num !== undefined) {
                    return markTodo(num);
                  } else {
                    console.log("Error");
                    return ;
                  }
                }));
  }
}

function cmdReport(param) {
  var pending = readFile(pendingTodosFile).length;
  var completed = readFile(completedTodosFile).length;
  console.log(Curry._1(getToday, undefined) + " Pending : " + String(pending) + " Completed : " + String(completed));
  
}

var argv = process.argv;

var command = Belt_Array.get(argv, 2);

var args = argv.splice(3);

function option(command, args) {
  var command$1 = Belt_Option.getWithDefault(command, "help");
  var command$2;
  switch (command$1) {
    case "add" :
        command$2 = {
          TAG: /* Add */0,
          _0: args
        };
        break;
    case "del" :
        command$2 = {
          TAG: /* Delete */1,
          _0: Belt_Array.map(args, Belt_Int.fromString)
        };
        break;
    case "done" :
        command$2 = {
          TAG: /* Done */2,
          _0: Belt_Array.map(args, Belt_Int.fromString)
        };
        break;
    case "ls" :
        command$2 = /* Ls */1;
        break;
    case "report" :
        command$2 = /* Report */2;
        break;
    default:
      command$2 = /* Help */0;
  }
  if (typeof command$2 === "number") {
    switch (command$2) {
      case /* Help */0 :
          console.log(help_string);
          return ;
      case /* Ls */1 :
          return cmdLs(undefined);
      case /* Report */2 :
          return cmdReport(undefined);
      
    }
  } else {
    switch (command$2.TAG | 0) {
      case /* Add */0 :
          return cmdAddTodo(command$2._0);
      case /* Delete */1 :
          return cmdDelTodo(command$2._0);
      case /* Done */2 :
          return cmdMarkDone(command$2._0);
      
    }
  }
}

option(command, args);

exports.getToday = getToday;
exports.encoding = encoding;
exports.pendingTodosFile = pendingTodosFile;
exports.completedTodosFile = completedTodosFile;
exports.help_string = help_string;
exports.isEmpty = isEmpty;
exports.convertToInt = convertToInt;
exports.readFile = readFile;
exports.delTodo = delTodo;
exports.markTodo = markTodo;
exports.cmdHelp = cmdHelp;
exports.cmdLs = cmdLs;
exports.cmdAddTodo = cmdAddTodo;
exports.cmdDelTodo = cmdDelTodo;
exports.cmdMarkDone = cmdMarkDone;
exports.cmdReport = cmdReport;
exports.argv = argv;
exports.command = command;
exports.args = args;
exports.option = option;
/* argv Not a pure module */
